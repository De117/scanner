import lxml
from lxml import html, etree
from io import StringIO
import requests
import urllib.parse
import sys

###
#
# wordpress-related functions
#
###
plugin_list = None
tried_loading = False
plugin_list_location = "wp_plugins.txt"
DETECT_PLUGINS = True
DEFAULT_TIMEOUT = 10

# returns version string if it can find one, 
# otherwise just True if the site is a WordPress site
def check_if_wordpress(domain):
    results = []
    results.append( check_feed(domain) )
    results.append( check_html_source(domain) )
    for res in results:
        if type(res)==str:
            return res
    return any(results)

# checks RSS feed (XML) for a "generator" tag
def check_feed(domain):
    feed_path = domain+"feed/"
    try:
        response = requests.get(feed_path, timeout=DEFAULT_TIMEOUT)
    except requests.RequestException:
        return False
    if (response.ok):
        try:
            feed_root = etree.fromstring( bytes(response.text, "utf-8") )
            gen_string = feed_root.find("channel").find("generator").text
            if any(c.isdigit() for c in gen_string):
                # the version number, as a string
                ret = gen_string.split("=")[-1]
            else:
                # whether it is generated by wordpress
                ret = "wordpress" in gen_string.lower()
            return ret
        except Exception:
            return False
    return False

# checks page source (HTML) for a "generator" meta tag
def check_html_source(domain):
    try:
        response = requests.get(domain, timeout=DEFAULT_TIMEOUT)
    except requests.RequestException:
        return False
    if not response.ok:
        return False
    try:
        root = html.parse(StringIO(response.text)).getroot()
        for m in root.head.findall("meta"):
            if "name" in m.keys() and "content" in m.keys() \
                    and m.attrib["name"]=="generator":
                if "wordpress" in m.attrib["content"].lower():
                    try:
                        # return the version number, as a string
                        return m.attrib["content"].split(" ")[1]
                    except IndexError:
                        # or just that it is generated by wordpress
                        return True
    except Exception as e:
        #print(e, file=sys.stderr)
        return False
    return False

def check_for_plugins(domain, plugin_names):
    exists = {}
    for name in plugin_names:
        exists[name] = check_plugin_url(domain, name)
    return exists

def check_plugin_url(domain, plugin_name):
    paths=["wp-content/plugins/"]
    res = False
    for path in paths:
        try:
            response = requests.get(domain+path+plugin_name, timeout=DEFAULT_TIMEOUT)
        except requests.RequestException:
            return False
        # if response is 403 forbidden, plugin exists
        # otherwise, it should respond with 404
        # sometimes, however, it returns 200, with a "page not found" page
        # (or an empty response)
        # which I'm not sure how to interpret
        res = res or (response.status_code == 403)
    return res

# tries to load the plugin list
# and returns it if successful
def load_plugin_list():
    tried_loading=True
    try:
        f = open(plugin_list_location, "r")
        lines = [l.strip() for l in f.readlines()]
        f.close()
    except Exception:
        return None;
    return lines;



def process(host, stream):
    global plugin_list

    hostname, IP = host
    if (hostname=="?"):
        return
    domain = "http://"+hostname+"/"

    # check for wordpress, version
    wp = check_if_wordpress(domain)
    if (wp):
        print("\n"+domain+" IS a WordPress site. ", file=stream)
    else:
        print("\n"+domain+" IS NOT a WordPress site. ", file=stream)
    if type(wp)==str:
        print("WP version is "+wp, file=stream) 

    # check if plugin list is loaded
    if not plugin_list:
        if tried_loading:
            return
        plugin_list = load_plugin_list()
        if not plugin_list:
            return
    
    # check for plugins
    if (wp and DETECT_PLUGINS):
        plugins = check_for_plugins(domain, plugin_list)
        plugins = [i for i in plugins.keys() if plugins[i]]
        if not len(plugins):
            print("No plugins found.", file=stream)
        else:
            print("Found plugins: ", file=stream)
            for p in plugins:
                print(urllib.parse.unquote(p), file=stream)
